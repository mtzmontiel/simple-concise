// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mx.rmm.simpleconcise.roo.web;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import mx.rmm.simpleconcise.roo.model.Container;
import mx.rmm.simpleconcise.roo.model.Item;
import mx.rmm.simpleconcise.roo.web.ContainerBean;
import mx.rmm.simpleconcise.roo.web.util.MessageFactory;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ContainerBean_Roo_ManagedBean {
    
    declare @type: ContainerBean: @ManagedBean(name = "containerBean");
    
    declare @type: ContainerBean: @SessionScoped;
    
    private String ContainerBean.name = "Containers";
    
    private Container ContainerBean.container;
    
    private List<Container> ContainerBean.allContainers;
    
    private boolean ContainerBean.dataVisible = false;
    
    private List<String> ContainerBean.columns;
    
    private HtmlPanelGrid ContainerBean.createPanelGrid;
    
    private HtmlPanelGrid ContainerBean.editPanelGrid;
    
    private HtmlPanelGrid ContainerBean.viewPanelGrid;
    
    private boolean ContainerBean.createDialogVisible = false;
    
    private List<Item> ContainerBean.selectedItems;
    
    @PostConstruct
    public void ContainerBean.init() {
        columns = new ArrayList<String>();
        columns.add("code");
        columns.add("description");
    }
    
    public String ContainerBean.getName() {
        return name;
    }
    
    public List<String> ContainerBean.getColumns() {
        return columns;
    }
    
    public List<Container> ContainerBean.getAllContainers() {
        return allContainers;
    }
    
    public void ContainerBean.setAllContainers(List<Container> allContainers) {
        this.allContainers = allContainers;
    }
    
    public String ContainerBean.findAllContainers() {
        allContainers = Container.findAllContainers();
        dataVisible = !allContainers.isEmpty();
        return null;
    }
    
    public boolean ContainerBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ContainerBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ContainerBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ContainerBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ContainerBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ContainerBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ContainerBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ContainerBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ContainerBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codeCreateOutput.setFor("codeCreateInput");
        codeCreateOutput.setId("codeCreateOutput");
        codeCreateOutput.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeCreateOutput);
        
        InputText codeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeCreateInput.setId("codeCreateInput");
        codeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{containerBean.container.code}", String.class));
        codeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codeCreateInput);
        
        Message codeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeCreateInputMessage.setId("codeCreateInputMessage");
        codeCreateInputMessage.setFor("codeCreateInput");
        codeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeCreateInputMessage);
        
        OutputLabel descriptionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionCreateOutput.setFor("descriptionCreateInput");
        descriptionCreateOutput.setId("descriptionCreateOutput");
        descriptionCreateOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionCreateOutput);
        
        InputText descriptionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descriptionCreateInput.setId("descriptionCreateInput");
        descriptionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{containerBean.container.description}", String.class));
        descriptionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionCreateInput);
        
        Message descriptionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionCreateInputMessage.setId("descriptionCreateInputMessage");
        descriptionCreateInputMessage.setFor("descriptionCreateInput");
        descriptionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionCreateInputMessage);
        
        HtmlOutputText itemsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsCreateOutput.setId("itemsCreateOutput");
        itemsCreateOutput.setValue("Items:");
        htmlPanelGrid.getChildren().add(itemsCreateOutput);
        
        HtmlOutputText itemsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsCreateInput.setId("itemsCreateInput");
        itemsCreateInput.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsCreateInput);
        
        Message itemsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsCreateInputMessage.setId("itemsCreateInputMessage");
        itemsCreateInputMessage.setFor("itemsCreateInput");
        itemsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ContainerBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codeEditOutput.setFor("codeEditInput");
        codeEditOutput.setId("codeEditOutput");
        codeEditOutput.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeEditOutput);
        
        InputText codeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codeEditInput.setId("codeEditInput");
        codeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{containerBean.container.code}", String.class));
        codeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codeEditInput);
        
        Message codeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codeEditInputMessage.setId("codeEditInputMessage");
        codeEditInputMessage.setFor("codeEditInput");
        codeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codeEditInputMessage);
        
        OutputLabel descriptionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descriptionEditOutput.setFor("descriptionEditInput");
        descriptionEditOutput.setId("descriptionEditOutput");
        descriptionEditOutput.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionEditOutput);
        
        InputText descriptionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descriptionEditInput.setId("descriptionEditInput");
        descriptionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{containerBean.container.description}", String.class));
        descriptionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descriptionEditInput);
        
        Message descriptionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descriptionEditInputMessage.setId("descriptionEditInputMessage");
        descriptionEditInputMessage.setFor("descriptionEditInput");
        descriptionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descriptionEditInputMessage);
        
        HtmlOutputText itemsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsEditOutput.setId("itemsEditOutput");
        itemsEditOutput.setValue("Items:");
        htmlPanelGrid.getChildren().add(itemsEditOutput);
        
        HtmlOutputText itemsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsEditInput.setId("itemsEditInput");
        itemsEditInput.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsEditInput);
        
        Message itemsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsEditInputMessage.setId("itemsEditInputMessage");
        itemsEditInputMessage.setFor("itemsEditInput");
        itemsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ContainerBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText codeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeLabel.setId("codeLabel");
        codeLabel.setValue("Code:");
        htmlPanelGrid.getChildren().add(codeLabel);
        
        HtmlOutputText codeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codeValue.setId("codeValue");
        codeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{containerBean.container.code}", String.class));
        htmlPanelGrid.getChildren().add(codeValue);
        
        HtmlOutputText descriptionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionLabel.setId("descriptionLabel");
        descriptionLabel.setValue("Description:");
        htmlPanelGrid.getChildren().add(descriptionLabel);
        
        HtmlOutputText descriptionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descriptionValue.setId("descriptionValue");
        descriptionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{containerBean.container.description}", String.class));
        htmlPanelGrid.getChildren().add(descriptionValue);
        
        HtmlOutputText itemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsLabel.setId("itemsLabel");
        itemsLabel.setValue("Items:");
        htmlPanelGrid.getChildren().add(itemsLabel);
        
        HtmlOutputText itemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsValue.setId("itemsValue");
        itemsValue.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsValue);
        
        return htmlPanelGrid;
    }
    
    public Container ContainerBean.getContainer() {
        if (container == null) {
            container = new Container();
        }
        return container;
    }
    
    public void ContainerBean.setContainer(Container container) {
        this.container = container;
    }
    
    public List<Item> ContainerBean.getSelectedItems() {
        return selectedItems;
    }
    
    public void ContainerBean.setSelectedItems(List<Item> selectedItems) {
        if (selectedItems != null) {
            container.setItems(new HashSet<Item>(selectedItems));
        }
        this.selectedItems = selectedItems;
    }
    
    public String ContainerBean.onEdit() {
        if (container != null && container.getItems() != null) {
            selectedItems = new ArrayList<Item>(container.getItems());
        }
        return null;
    }
    
    public boolean ContainerBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ContainerBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ContainerBean.displayList() {
        createDialogVisible = false;
        findAllContainers();
        return "container";
    }
    
    public String ContainerBean.displayCreateDialog() {
        container = new Container();
        createDialogVisible = true;
        return "container";
    }
    
    public String ContainerBean.persist() {
        String message = "";
        if (container.getId() != null) {
            container.merge();
            message = "message_successfully_updated";
        } else {
            container.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Container");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllContainers();
    }
    
    public String ContainerBean.delete() {
        container.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Container");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllContainers();
    }
    
    public void ContainerBean.reset() {
        container = null;
        selectedItems = null;
        createDialogVisible = false;
    }
    
    public void ContainerBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
