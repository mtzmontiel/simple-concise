// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mx.rmm.simpleconcise.roo.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import mx.rmm.simpleconcise.roo.model.Artifact;
import mx.rmm.simpleconcise.roo.model.Deployment;
import mx.rmm.simpleconcise.roo.model.DeploymentStatus;
import mx.rmm.simpleconcise.roo.model.Server;
import mx.rmm.simpleconcise.roo.web.DeploymentBean;
import mx.rmm.simpleconcise.roo.web.converter.ArtifactConverter;
import mx.rmm.simpleconcise.roo.web.converter.ServerConverter;
import mx.rmm.simpleconcise.roo.web.util.MessageFactory;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect DeploymentBean_Roo_ManagedBean {
    
    declare @type: DeploymentBean: @ManagedBean(name = "deploymentBean");
    
    declare @type: DeploymentBean: @SessionScoped;
    
    private String DeploymentBean.name = "Deployments";
    
    private Deployment DeploymentBean.deployment;
    
    private List<Deployment> DeploymentBean.allDeployments;
    
    private boolean DeploymentBean.dataVisible = false;
    
    private List<String> DeploymentBean.columns;
    
    private HtmlPanelGrid DeploymentBean.createPanelGrid;
    
    private HtmlPanelGrid DeploymentBean.editPanelGrid;
    
    private HtmlPanelGrid DeploymentBean.viewPanelGrid;
    
    private boolean DeploymentBean.createDialogVisible = false;
    
    @PostConstruct
    public void DeploymentBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
        columns.add("schedulledDate");
    }
    
    public String DeploymentBean.getName() {
        return name;
    }
    
    public List<String> DeploymentBean.getColumns() {
        return columns;
    }
    
    public List<Deployment> DeploymentBean.getAllDeployments() {
        return allDeployments;
    }
    
    public void DeploymentBean.setAllDeployments(List<Deployment> allDeployments) {
        this.allDeployments = allDeployments;
    }
    
    public String DeploymentBean.findAllDeployments() {
        allDeployments = Deployment.findAllDeployments();
        dataVisible = !allDeployments.isEmpty();
        return null;
    }
    
    public boolean DeploymentBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DeploymentBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DeploymentBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DeploymentBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DeploymentBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DeploymentBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DeploymentBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DeploymentBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DeploymentBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.name}", String.class));
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        OutputLabel schedulledDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        schedulledDateCreateOutput.setFor("schedulledDateCreateInput");
        schedulledDateCreateOutput.setId("schedulledDateCreateOutput");
        schedulledDateCreateOutput.setValue("Schedulled Date:");
        htmlPanelGrid.getChildren().add(schedulledDateCreateOutput);
        
        Calendar schedulledDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        schedulledDateCreateInput.setId("schedulledDateCreateInput");
        schedulledDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.schedulledDate}", Date.class));
        schedulledDateCreateInput.setNavigator(true);
        schedulledDateCreateInput.setEffect("slideDown");
        schedulledDateCreateInput.setPattern("dd/MM/yyyy");
        schedulledDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(schedulledDateCreateInput);
        
        Message schedulledDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        schedulledDateCreateInputMessage.setId("schedulledDateCreateInputMessage");
        schedulledDateCreateInputMessage.setFor("schedulledDateCreateInput");
        schedulledDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(schedulledDateCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        AutoComplete statusCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.status}", DeploymentStatus.class));
        statusCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{deploymentBean.completeStatus}", List.class, new Class[] { String.class }));
        statusCreateInput.setDropdown(true);
        statusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel artifactCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        artifactCreateOutput.setFor("artifactCreateInput");
        artifactCreateOutput.setId("artifactCreateOutput");
        artifactCreateOutput.setValue("Artifact:");
        htmlPanelGrid.getChildren().add(artifactCreateOutput);
        
        AutoComplete artifactCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        artifactCreateInput.setId("artifactCreateInput");
        artifactCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.artifact}", Artifact.class));
        artifactCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{deploymentBean.completeArtifact}", List.class, new Class[] { String.class }));
        artifactCreateInput.setDropdown(true);
        artifactCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "artifact", String.class));
        artifactCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{artifact.name}", String.class));
        artifactCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{artifact}", Artifact.class));
        artifactCreateInput.setConverter(new ArtifactConverter());
        artifactCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(artifactCreateInput);
        
        Message artifactCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        artifactCreateInputMessage.setId("artifactCreateInputMessage");
        artifactCreateInputMessage.setFor("artifactCreateInput");
        artifactCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(artifactCreateInputMessage);
        
        OutputLabel serverCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        serverCreateOutput.setFor("serverCreateInput");
        serverCreateOutput.setId("serverCreateOutput");
        serverCreateOutput.setValue("Server:");
        htmlPanelGrid.getChildren().add(serverCreateOutput);
        
        AutoComplete serverCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        serverCreateInput.setId("serverCreateInput");
        serverCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.server}", Server.class));
        serverCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{deploymentBean.completeServer}", List.class, new Class[] { String.class }));
        serverCreateInput.setDropdown(true);
        serverCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "server", String.class));
        serverCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{server.name}", String.class));
        serverCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{server}", Server.class));
        serverCreateInput.setConverter(new ServerConverter());
        serverCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(serverCreateInput);
        
        Message serverCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        serverCreateInputMessage.setId("serverCreateInputMessage");
        serverCreateInputMessage.setFor("serverCreateInput");
        serverCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(serverCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DeploymentBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.name}", String.class));
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        OutputLabel schedulledDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        schedulledDateEditOutput.setFor("schedulledDateEditInput");
        schedulledDateEditOutput.setId("schedulledDateEditOutput");
        schedulledDateEditOutput.setValue("Schedulled Date:");
        htmlPanelGrid.getChildren().add(schedulledDateEditOutput);
        
        Calendar schedulledDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        schedulledDateEditInput.setId("schedulledDateEditInput");
        schedulledDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.schedulledDate}", Date.class));
        schedulledDateEditInput.setNavigator(true);
        schedulledDateEditInput.setEffect("slideDown");
        schedulledDateEditInput.setPattern("dd/MM/yyyy");
        schedulledDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(schedulledDateEditInput);
        
        Message schedulledDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        schedulledDateEditInputMessage.setId("schedulledDateEditInputMessage");
        schedulledDateEditInputMessage.setFor("schedulledDateEditInput");
        schedulledDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(schedulledDateEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        AutoComplete statusEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.status}", DeploymentStatus.class));
        statusEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{deploymentBean.completeStatus}", List.class, new Class[] { String.class }));
        statusEditInput.setDropdown(true);
        statusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel artifactEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        artifactEditOutput.setFor("artifactEditInput");
        artifactEditOutput.setId("artifactEditOutput");
        artifactEditOutput.setValue("Artifact:");
        htmlPanelGrid.getChildren().add(artifactEditOutput);
        
        AutoComplete artifactEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        artifactEditInput.setId("artifactEditInput");
        artifactEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.artifact}", Artifact.class));
        artifactEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{deploymentBean.completeArtifact}", List.class, new Class[] { String.class }));
        artifactEditInput.setDropdown(true);
        artifactEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "artifact", String.class));
        artifactEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{artifact.name}", String.class));
        artifactEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{artifact}", Artifact.class));
        artifactEditInput.setConverter(new ArtifactConverter());
        artifactEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(artifactEditInput);
        
        Message artifactEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        artifactEditInputMessage.setId("artifactEditInputMessage");
        artifactEditInputMessage.setFor("artifactEditInput");
        artifactEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(artifactEditInputMessage);
        
        OutputLabel serverEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        serverEditOutput.setFor("serverEditInput");
        serverEditOutput.setId("serverEditOutput");
        serverEditOutput.setValue("Server:");
        htmlPanelGrid.getChildren().add(serverEditOutput);
        
        AutoComplete serverEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        serverEditInput.setId("serverEditInput");
        serverEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.server}", Server.class));
        serverEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{deploymentBean.completeServer}", List.class, new Class[] { String.class }));
        serverEditInput.setDropdown(true);
        serverEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "server", String.class));
        serverEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{server.name}", String.class));
        serverEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{server}", Server.class));
        serverEditInput.setConverter(new ServerConverter());
        serverEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(serverEditInput);
        
        Message serverEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        serverEditInputMessage.setId("serverEditInputMessage");
        serverEditInputMessage.setFor("serverEditInput");
        serverEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(serverEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DeploymentBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        HtmlOutputText schedulledDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        schedulledDateLabel.setId("schedulledDateLabel");
        schedulledDateLabel.setValue("Schedulled Date:");
        htmlPanelGrid.getChildren().add(schedulledDateLabel);
        
        HtmlOutputText schedulledDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        schedulledDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.schedulledDate}", Date.class));
        DateTimeConverter schedulledDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        schedulledDateValueConverter.setPattern("dd/MM/yyyy");
        schedulledDateValue.setConverter(schedulledDateValueConverter);
        htmlPanelGrid.getChildren().add(schedulledDateValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.status}", String.class));
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText artifactLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        artifactLabel.setId("artifactLabel");
        artifactLabel.setValue("Artifact:");
        htmlPanelGrid.getChildren().add(artifactLabel);
        
        HtmlOutputText artifactValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        artifactValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.artifact}", Artifact.class));
        artifactValue.setConverter(new ArtifactConverter());
        htmlPanelGrid.getChildren().add(artifactValue);
        
        HtmlOutputText serverLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        serverLabel.setId("serverLabel");
        serverLabel.setValue("Server:");
        htmlPanelGrid.getChildren().add(serverLabel);
        
        HtmlOutputText serverValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        serverValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{deploymentBean.deployment.server}", Server.class));
        serverValue.setConverter(new ServerConverter());
        htmlPanelGrid.getChildren().add(serverValue);
        
        return htmlPanelGrid;
    }
    
    public Deployment DeploymentBean.getDeployment() {
        if (deployment == null) {
            deployment = new Deployment();
        }
        return deployment;
    }
    
    public void DeploymentBean.setDeployment(Deployment deployment) {
        this.deployment = deployment;
    }
    
    public List<DeploymentStatus> DeploymentBean.completeStatus(String query) {
        List<DeploymentStatus> suggestions = new ArrayList<DeploymentStatus>();
        for (DeploymentStatus deploymentStatus : DeploymentStatus.values()) {
            if (deploymentStatus.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(deploymentStatus);
            }
        }
        return suggestions;
    }
    
    public List<Artifact> DeploymentBean.completeArtifact(String query) {
        List<Artifact> suggestions = new ArrayList<Artifact>();
        for (Artifact artifact : Artifact.findAllArtifacts()) {
            String artifactStr = String.valueOf(artifact.getName());
            if (artifactStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(artifact);
            }
        }
        return suggestions;
    }
    
    public List<Server> DeploymentBean.completeServer(String query) {
        List<Server> suggestions = new ArrayList<Server>();
        for (Server server : Server.findAllServers()) {
            String serverStr = String.valueOf(server.getName());
            if (serverStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(server);
            }
        }
        return suggestions;
    }
    
    public String DeploymentBean.onEdit() {
        return null;
    }
    
    public boolean DeploymentBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DeploymentBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DeploymentBean.displayList() {
        createDialogVisible = false;
        findAllDeployments();
        return "deployment";
    }
    
    public String DeploymentBean.displayCreateDialog() {
        deployment = new Deployment();
        createDialogVisible = true;
        return "deployment";
    }
    
    public String DeploymentBean.persist() {
        String message = "";
        if (deployment.getId() != null) {
            deployment.merge();
            message = "message_successfully_updated";
        } else {
            deployment.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Deployment");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDeployments();
    }
    
    public String DeploymentBean.delete() {
        deployment.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Deployment");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDeployments();
    }
    
    public void DeploymentBean.reset() {
        deployment = null;
        createDialogVisible = false;
    }
    
    public void DeploymentBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
