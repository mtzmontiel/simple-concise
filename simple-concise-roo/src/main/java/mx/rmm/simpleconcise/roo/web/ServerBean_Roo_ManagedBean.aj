// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mx.rmm.simpleconcise.roo.web;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import mx.rmm.simpleconcise.roo.model.Server;
import mx.rmm.simpleconcise.roo.web.ServerBean;
import mx.rmm.simpleconcise.roo.web.util.MessageFactory;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ServerBean_Roo_ManagedBean {
    
    declare @type: ServerBean: @ManagedBean(name = "serverBean");
    
    declare @type: ServerBean: @SessionScoped;
    
    private String ServerBean.name = "Servers";
    
    private Server ServerBean.server;
    
    private List<Server> ServerBean.allServers;
    
    private boolean ServerBean.dataVisible = false;
    
    private List<String> ServerBean.columns;
    
    private HtmlPanelGrid ServerBean.createPanelGrid;
    
    private HtmlPanelGrid ServerBean.editPanelGrid;
    
    private HtmlPanelGrid ServerBean.viewPanelGrid;
    
    private boolean ServerBean.createDialogVisible = false;
    
    @PostConstruct
    public void ServerBean.init() {
        columns = new ArrayList<String>();
        columns.add("name");
    }
    
    public String ServerBean.getName() {
        return name;
    }
    
    public List<String> ServerBean.getColumns() {
        return columns;
    }
    
    public List<Server> ServerBean.getAllServers() {
        return allServers;
    }
    
    public void ServerBean.setAllServers(List<Server> allServers) {
        this.allServers = allServers;
    }
    
    public String ServerBean.findAllServers() {
        allServers = Server.findAllServers();
        dataVisible = !allServers.isEmpty();
        return null;
    }
    
    public boolean ServerBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ServerBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ServerBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ServerBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ServerBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ServerBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ServerBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ServerBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ServerBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameCreateOutput.setFor("nameCreateInput");
        nameCreateOutput.setId("nameCreateOutput");
        nameCreateOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameCreateOutput);
        
        InputText nameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameCreateInput.setId("nameCreateInput");
        nameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{serverBean.server.name}", String.class));
        nameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameCreateInput);
        
        Message nameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameCreateInputMessage.setId("nameCreateInputMessage");
        nameCreateInputMessage.setFor("nameCreateInput");
        nameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ServerBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nameEditOutput.setFor("nameEditInput");
        nameEditOutput.setId("nameEditOutput");
        nameEditOutput.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameEditOutput);
        
        InputText nameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nameEditInput.setId("nameEditInput");
        nameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{serverBean.server.name}", String.class));
        nameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nameEditInput);
        
        Message nameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nameEditInputMessage.setId("nameEditInputMessage");
        nameEditInputMessage.setFor("nameEditInput");
        nameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nameEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ServerBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameLabel.setId("nameLabel");
        nameLabel.setValue("Name:");
        htmlPanelGrid.getChildren().add(nameLabel);
        
        HtmlOutputText nameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nameValue.setId("nameValue");
        nameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{serverBean.server.name}", String.class));
        htmlPanelGrid.getChildren().add(nameValue);
        
        return htmlPanelGrid;
    }
    
    public Server ServerBean.getServer() {
        if (server == null) {
            server = new Server();
        }
        return server;
    }
    
    public void ServerBean.setServer(Server server) {
        this.server = server;
    }
    
    public String ServerBean.onEdit() {
        return null;
    }
    
    public boolean ServerBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ServerBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ServerBean.displayList() {
        createDialogVisible = false;
        findAllServers();
        return "server";
    }
    
    public String ServerBean.displayCreateDialog() {
        server = new Server();
        createDialogVisible = true;
        return "server";
    }
    
    public String ServerBean.persist() {
        String message = "";
        if (server.getId() != null) {
            server.merge();
            message = "message_successfully_updated";
        } else {
            server.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Server");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllServers();
    }
    
    public String ServerBean.delete() {
        server.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Server");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllServers();
    }
    
    public void ServerBean.reset() {
        server = null;
        createDialogVisible = false;
    }
    
    public void ServerBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
